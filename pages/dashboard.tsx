import { useEffect, useState } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import { Vortex } from "react-loader-spinner";
import axios from "axios";
import useMarket from "../web3/hooks/useMarketPlace";
import { Contract, ethers } from "ethers";
import useNFT from "../web3/hooks/useNft";
import { shortenAddress } from "../utils/helper";
import { useAccount } from "wagmi";

const Dashboard = () => {
  const [nft, setNft] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);

  let pre = "https://dweb.link/ipfs/";

  const { contract } = useNFT();
  const { market } = useMarket();
  const { address } = useAccount();

  const fetchNFTs = async () => {
    setLoading(true);
    try {
      const datas = await market.fetchItemListed();
      const items: any = await Promise.all(
        datas.map(async (data: any) => {
          let tokenURI = await contract.tokenURI(data.tokenId);
          let formatURI = await tokenURI.replace("ipfs://", pre);
          let meta = await axios.get(formatURI);
          let price = ethers.utils.formatUnits(data.price.toString(), "ether");
          let formatImage = await meta.data.image.replace("ipfs://", pre);
          let item = {
            price,
            tokenId: data.tokenId.toNumber(),
            seller: data.seller,
            owner: data.owner,
            image: formatImage,
            description: meta.data.description,
          };
          return item;
        })
      );
      setNft(items);
      setLoading(false);
    } catch (error) {
      console.error(error);
    }
  };

  useEffect(() => {
    fetchNFTs();
  }, [address, contract]);

  // if (!loading && !nft.length) return <p>No Asset yet</p>;
  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <section className="container mx-auto p-2">
        {loading ? (
          <div className="flex justify-center mt-12">
            <Vortex
              visible={true}
              height="80"
              width="80"
              ariaLabel="vortex-loading"
              wrapperStyle={{}}
              wrapperClass="vortex-wrapper"
              colors={["red", "green", "blue", "yellow", "orange", "purple"]}
            />
          </div>
        ) : (
          <div className="grid p-2 md:p-0 lg:p-0 md:grid-cols-2  lg:grid-cols-4 gap-4">
            {nft.map((item, idx) => {
              return (
                <div className="border-2 rounded-lg border-purple-500 p-2">
                  <div className="mb-1">
                    <img src={item.image} alt="image" />
                  </div>
                  <p>
                    <span className="mr-2">Seller:</span>
                    {shortenAddress(item.seller)}
                  </p>
                  <p>
                    <span className="mr-2">Description:</span>
                    {item.description}
                  </p>
                  <p>
                    <span className="mr-2">Price:</span>
                    {`${item.price} ETH`}
                  </p>
                </div>
              );
            })}
          </div>
        )}
      </section>
    </div>
  );
};

export default Dashboard;
